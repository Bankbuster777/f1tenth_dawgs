/**:
  ros__parameters:
    ### general vehicle parameters required in several functions
    # v_max:                        [m/s] maximal vehicle speed
    # length:                       [m] vehicle length
    # width:                        [m] vehicle width
    # mass:                         [kg] vehiclemass
    # dragcoeff:                    [kg*m2/m3] drag coefficient calculated by 0.5 * rho_air * c_w * A_front
    # curvlim:                      [rad/m] curvature limit of the vehicle
    # g:                            [N/kg] gravity acceleration
    veh_params:
      v_max: 15.0
      length: 0.535
      width: 0.30
      mass: 3.518
      drag_coeff: 0.0136
      curvlim: 1.0
      g: 9.81

    ### optimization problem options (shortest path optimization) ----------------------------------------------------------
    # width_opt:                    [m] vehicle width for optimization including safety distance

    optim_opts_shortest_path:
      width_opt: 1.20

    ### optimization problem options (minimum curvature optimization) ------------------------------------------------------
    # width_opt:                    [m] vehicle width for optimization including safety distance
    # iqp_iters_min:                [-] minimum number of iterations for the IQP
    # iqp_curverror_allowed:        [rad/m] maximum allowed curvature error for the IQP

    optim_opts_mincurv:
      width_opt: 0.8
      iqp_iters_min: 5
      iqp_curverror_allowed: 0.1

    ### optimization problem options (minimum lap time optimization) -------------------------------------------------------
    # width_opt:                    [m] vehicle width for optimization including safety distance
    # penalty_delta:                [-] penalty of delta derivative for improved smoothness of controls (range [0.0, 50.0])
    # penalty_F:                    [-] penalty of F derivative for improved smoothness of controls (range [0.0, 2.0])
    # mue:                          [-] constant friction coefficient (determines tire's D parameter of MF by D = F_z * mue)
    # n_gauss                       [-] number of gaussian basis functions on each side (var_friction: "gauss")
    # dn                            [m] distance of equidistant points on normal vectors for extracting friction
                                    # coefficients (var_friction: "linear" or "gauss")
    # limit_energy:                 [true/false] limit energy consumption
    # energy_limit:                 [kWh/lap] energy consumption limit (limit_energy: true)
    # safe_traj:                    [true/false] safe trajectories -> limit accelerations
    # ax_pos_safe:                  [m/s2] a_x+ limit for safe trajectories (safe_traj: true) -> null if ggv should be used
    # ax_neg_safe:                  [m/s2] a_x- limit for safe trajectories (safe_traj: true) -> null if ggv should be used
    # ay_safe:                      [m/s2] a_y limit for safe trajectories (safe_traj: true) -> null if ggv should be used
    # w_tr_reopt:                   [m] total track width in case of reoptimization using the IQP
    # w_veh_reopt:                  [m] vehicle width in case of reoptimization using the IQP
    # w_add_spl_regr:               [m] width added in case of reoptimization to compensate second spline regression
    # step_non_reg:                 [-] defines how many points to be skipped per step during non-regular point sampling
    #                               (dependent on curvature)
    # eps_kappa:                    [rad/m] curvature threshold to skip discretization points on straights (if
    #                               step_non_reg > 0)

    optim_opts_mintime:
      width_opt: 0.8
      penalty_delta: 1.0
      penalty_F: 0.1
      mue: 1.0
      n_gauss: 5
      dn: 0.025
      limit_energy: false
      energy_limit: 2.0
      safe_traj: false
      ax_pos_safe: null
      ax_neg_safe: null
      ay_safe: null
      w_tr_reopt: 1.0
      w_veh_reopt: 0.8
      w_add_spl_regr: 0.0
      step_non_reg: 0
      eps_kappa: 1e-3

    ### vehicle parameters (minimum lap time optimization)
    # wheelbase_front:              [m] wheelbase front
    # wheelbase_rear:               [m] wheelbase rear
    # track_width_front:            [m] track width front
    # track_width_rear:             [m] track width rear
    # cog_z:                        [m] center of gravity
    # I_z:                          [kgm^2] yaw inertia
    # liftcoeff_front:              [kg*m2/m3] lift coefficient front axle calculated by 0.5 * rho_air * c_l_f * A_spoiler_f
    # liftcoeff_rear:               [kg*m2/m3] lift coefficient rear axle calculated by 0.5 * rho_air * c_l_r * A_spoiler_r
    # k_brake_front:                [-] portion of braking force at the front axle of the total braking force
    # k_drive_front:                [-] portion of driving force at the front axle of the total driving force
    # k_roll:                       [-] portion of roll moment at the front axle of the total roll moment
    # t_delta:                      [s] time constant for steering dynamic
    # t_drive:                      [s] time constant for acceleration dynamic
    # t_brake:                      [s] time constant for braking dynamic
    # power_max:                    [W] maximal engine power
    # f_drive_max:                  [N] maximal drive force
    # f_brake_max:                  [N] maximal brake force (only needed for actor dynamics)
    # delta_max:                    [rad] maximal steer angle

    vehicle_params_mintime:
      wheelbase_front: 0.15875
      wheelbase_rear: 0.17145
      track_width_front: 0.281
      track_width_rear: 0.281
      cog_z: 0.074
      I_z: 0.04712
      liftcoeff_front: 0.001
      liftcoeff_rear: 0.0015
      k_brake_front: 0.5
      k_drive_front: 0.0
      k_roll: 0.5
      t_delta: 0.1
      t_drive: 0.1
      t_brake: 0.1
      power_max: 267
      f_drive_max: 33.4
      f_brake_max: 47.4
      delta_max: 0.34

    ### tire parameters (minimum lap time optimization)
    # c_roll:                       [-] rolling resistance coefficient
    # f_z0:                         [N] nominal normal force
    # B_front:                      [-] Coefficient B for front tire
    # C_front:                      [-] Coefficient C for front tire
    # eps_front:                    [-] load dependence of Coefficient D for front tire
    # E_front:                      [-] Coefficient E for front tire
    # B_rear:                       [-] Coefficient B for rear tire
    # C_rear:                       [-] Coefficient C for rear tire
    # eps_rear:                     [-] load dependence of Coefficient D for rear tire
    # E_rear:                       [-] Coefficient E for rear tire
    # Hint: The D parameter of the Magic Formula is determined by D = F_z * mue. mue can be set above in optim_opts_mintime!

    tire_params_mintime:
      c_roll: 0.010
      f_z0: 8.6
      B_front: 7.4
      C_front: 1.2
      eps_front: -0.1
      E_front: 0.85
      B_rear: 7.4
      C_rear: 1.2
      eps_rear: -0.1
      E_rear: 0.85

